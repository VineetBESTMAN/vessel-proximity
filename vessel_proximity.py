# -*- coding: utf-8 -*-
"""vessel proximity.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DNYyXAmH14nzgiEBKG9VtVcgFniHe6yo
"""

# Install necessary libraries
!pip install geopy
!pip install geopandas

from google.colab import files
uploaded = files.upload()

import pandas as pd
import io

# Assuming your file is named 'sample_data.csv'
data = pd.read_csv(io.BytesIO(uploaded['sample_data.csv']))

# Preview the data
data.head()

data.info()  # Get a summary of the dataset
data.head()  # Look at the first few rows

data['timestamp'] = pd.to_datetime(data['timestamp'])

import numpy as np

def haversine(lat1, lon1, lat2, lon2):
    R = 6371  # Earth radius in kilometers

    phi1, phi2 = np.radians(lat1), np.radians(lat2)
    delta_phi = np.radians(lat2 - lat1)
    delta_lambda = np.radians(lon2 - lon1)

    a = np.sin(delta_phi / 2) ** 2 + np.cos(phi1) * np.cos(phi2) * np.sin(delta_lambda / 2) ** 2
    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))

    return R * c

import numpy as np

def haversine(lat1, lon1, lat2, lon2):
    R = 6371  # Earth radius in kilometers

    phi1, phi2 = np.radians(lat1), np.radians(lat2)
    delta_phi = np.radians(lat2 - lat1)
    delta_lambda = np.radians(lon2 - lon1)

    a = np.sin(delta_phi / 2) ** 2 + np.cos(phi1) * np.cos(phi2) * np.sin(delta_lambda / 2) ** 2
    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1 - a))

    return R * c

# Define the distance threshold in kilometers
distance_threshold = 1.0  # Adjust as needed

proximity_events = []

for timestamp, group in data.groupby('timestamp'):
    # Convert Pandas Series to NumPy arrays for outer subtraction
    lat_array = group['lat'].to_numpy()
    lon_array = group['lon'].to_numpy()

    lat_matrix = np.subtract.outer(lat_array, lat_array)
    lon_matrix = np.subtract.outer(lon_array, lon_array)

    distances = haversine(lat_array[:, None], lon_array[:, None], lat_array[None, :], lon_array[None, :])

    for i in range(len(group)):
        close_vessels = group[(distances[i] < distance_threshold) & (distances[i] > 0)]['mmsi'].tolist()
        if close_vessels:
            proximity_events.append({
                'mmsi': group.iloc[i]['mmsi'],
                'vessel_proximity': close_vessels,
                'timestamp': timestamp
            })

proximity_df = pd.DataFrame(proximity_events)
proximity_df.head()

import plotly.express as px

fig = px.scatter_mapbox(data, lat="lat", lon="lon", color="mmsi",
                        title="Vessel Positions",
                        mapbox_style="carto-positron")
fig.show()

proximity_df.to_csv('vessel_proximity_events.csv', index=False)

files.download('vessel_proximity_events.csv')